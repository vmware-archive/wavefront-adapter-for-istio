// Copyright 2018 VMware, Inc.
// SPDX-License-Identifier: Apache-2.0
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

// $title: Wavefront by VMware
// $description: Adapter to deliver metrics to Wavefront by VMware.
// $location: https://istio.io/docs/reference/config/policy-and-telemetry/adapters/wavefront.html
// $provider: VMware, Inc.
// $contact_email: veniln@vmware.com
// $support_link:
// $source_link: https://github.com/vmware/wavefront-adapter-for-istio
// $latest_release_link: https://github.com/vmware/wavefront-adapter-for-istio/releases/tag/0.1.1
// $helm_chart_link:
// $istio_versions: "1.0.3, 1.0.4"
// $supported_templates: metric
// $logo_link: https://github.com/vmware/wavefront-adapter-for-istio/raw/master/docs/images/logo.png

// The `wavefront` adapter collects metrics and makes them available to
// [Wavefront by VMware](https://www.wavefront.com/).
//
// This adapter supports the [metric template](https://istio.io/docs/reference/config/policy-and-telemetry/templates/metric/).
package wavefront.config;

import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";

option go_package="config";

// Configuration format for the `wavefront` adapter.
message Params {

  // One of the Wavefront service credentials must be supplied.
  oneof credentials {
    // The credentials for direct ingestion.
    WavefrontDirect direct = 1;

    // The credentials for ingestion via a Wavefront Proxy.
    WavefrontProxy proxy = 2;
  }

  // Describes Wavefront Server credentials.
  message WavefrontDirect {
    // The Wavefront server URL. Ex: https://mydomain.wavefront.com
    string server = 1;

    // The Wavefront API token.
    string token = 2;
  }

  // Describes Wavefront Proxy credentials.
  message WavefrontProxy {
    // The wavefront proxy address. Ex: 192.168.99.100:2878
    string address = 1;
  }

  // The metrics flush interval.
  google.protobuf.Duration flush_interval = 3 [(gogoproto.nullable) = false, (gogoproto.stdduration) = true];

  // The source tag for all metrics handled by this adapter.
  string source = 4;

  // The prefix to prepend all metrics handled by the adapter.
  string prefix = 5;

  // The set of metrics to publish to Wavefront.
  repeated MetricInfo metrics = 6;

  // Describes how a metric should be represented on Wavefront.
  message MetricInfo {
    // The metric name. (Optional)
    string name = 1;

    // The fully qualified Istio metric instance name.
    string instance_name = 4;

    // The metric type.
    Type type = 2;

    // Describes metric types as in [Wavefront](https://docs.wavefront.com/metric_types.html).
    enum Type {
      // Reserved for unknown metric types.
      UNKNOWN = 0;
      // Represents a gauge metric type.
      GAUGE = 1;
      // Represents a counter metric type.
      COUNTER = 2;
      // Represents a delta counter metric type.
      DELTA_COUNTER = 3;
      // Represents a histogram metric type.
      HISTOGRAM = 4;
    }

    // For metrics with type HISTOGRAM, this describes the sample definition.
    Sample sample = 3;

    // Describes a sample as in the [rcrowley/go-metrics](https://github.com/rcrowley/go-metrics) library.
    message Sample {
      // One of the sample definition must be supplied.
      oneof definition {
        // Definition of an exponentially decaying sample.
        ExpDecay exp_decay = 1;

        // Definition of a uniform sample.
        Uniform uniform = 2;
      }

      // Describes an exponentially decaying sample.
      message ExpDecay {
        // The reservoir size.
        int32 reservoir_size = 1;

        // The alpha.
        double alpha = 2;
      }

      // Describes a uniform sample.
      message Uniform {
        // The reservoir size.
        int32 reservoir_size = 1;
      }
    }
  }

  // Describes the logging configuration.
  message Logs {
    // The log level (one of error, warn, info, debug, or none). Ex: info
    string level = 1;
  }

  // The log configuration.
  Logs logs = 7;
}
